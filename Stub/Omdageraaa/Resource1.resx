<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="FradieMerqury" type="System.Byte[], mscorlib">
    <value>
        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
        AgAgIgAAAACGCB0AhAADAEIiAAAAAIYIKAAQAAMAVCIAAAAAhghyAIQABAB2IgAAAACGCIAAEAAEAIYi
        AAAAAIYYXAMGAAUAjyIAAAAAkRhiA4gABQAAAAEAFwQAAAEAhAIAAAEAhAIAAAEAhAIJAFwDAQARAFwD
        BgAZAFwDCgApAFwDEAAxAFwDEAA5AFwDEABBAFwDEABJAFwDEABRAFwDEABZAFwDEABhAFwDFQBpAFwD
        EABxAFwDEACBAFwDBgCJAFwDGgCZAFwDBgChAFwDBgCpAFwDEACxAEoAKAC5AOEDLQDBACQEKADBAPwD
        MgDJAMwCOADJALsCMgDRACQEKADRAGQEPgDBAAkERADhAEoESwDpAIoCBgB5AFwDBgDpANsCWgDpAOQC
        XwCRAFwDBgDpADMAZQAuAAsAlQAuABMAngAuABsAvQAuACMAxgAuACsA2QAuADMA2QAuADsA2QAuAEMA
        xgAuAEsA3wAuAFMA2QAuAFsA2QAuAGMABQEuAGsAEgFJAIMAWgFJAIsAWgFJAJMAuQFjAHMAWgFjAHsA
        XwFpAIMAWgFpAIsAWgFpAJMA3QGJAIMAWgGJAIsAWgGJAJMA2QAgAFEAVgADAAEAAAA2BIwAAABVA5EA
        AAAsAJEAAACEAJEAAgADAAMAAgAEAAUAAQAFAAUAAgAGAAcAAQAHAAcAAgAIAAkAAQAJAAkABIAAAAEA
        AAAAAAAAAAAAAAAAdAQAAAQAAAAAAAAAAAAAAGwAFAAAAAAABAAAAAAAAAAAAAAAbADtAgAAAAAAAAAA
        ADxNb2R1bGU+AFN5c3RlbS5JTwBtc2NvcmxpYgBnZXRfV29ya2VkAHNldF9Xb3JrZWQAU3luY2hyb25p
        emVkAEZvcmRpbmFuZABJc051bGxPcldoaXRlU3BhY2UAZGVmYXVsdEluc3RhbmNlAEZpbGUAZ2V0X0Z1
        cm5pdHVyZQBzZXRfRnVybml0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENvbXBpbGVyR2VuZXJh
        dGVkQXR0cmlidXRlAEdlbmVyYXRlZENvZGVBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJp
        YnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAENvbVZpc2libGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0
        dHJpYnV0ZQBEZWZhdWx0U2V0dGluZ1ZhbHVlQXR0cmlidXRlAFVzZXJTY29wZWRTZXR0aW5nQXR0cmli
        dXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3Nl
        bWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3Nl
        bWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNz
        ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5Q29t
        cGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQB2YWx1ZQBTYXZlAEZyYWRp
        ZU1lcnF1cnkuZXhlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcARnJvbUJhc2U2NFN0cmluZwBUb0Jh
        c2U2NFN0cmluZwBnZXRfSXRlbQBzZXRfSXRlbQBTeXN0ZW0ATWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlv
        bgBTeXN0ZW0uUmVmbGVjdGlvbgBEaXJlY3RvcnlJbmZvAFN5c3RlbS5Db2RlRG9tLkNvbXBpbGVyAGdl
        dF9EcmF3ZXIAc2V0X0RyYXdlcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5S
        dW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVn
        Z2luZ01vZGVzAERvbGJpbUJvbGR5LlByb3BlcnRpZXMARXhwYW5kRW52aXJvbm1lbnRWYXJpYWJsZXMA
        UmVhZEFsbEJ5dGVzAFdyaXRlQWxsQnl0ZXMAYXJncwBQcm9jZXNzAEV4aXN0cwBPYmplY3QAZ2V0X0Rl
        ZmF1bHQARW52aXJvbm1lbnQAU3RhcnQAQ29udmVydABEb2xiaW1Cb2xkeQBDcmVhdGVEaXJlY3RvcnkA
        RnJhZGllTWVycXVyeQAAAAANRAByAGEAdwBlAHIAAA1XAG8AcgBrAGUAZAAAE0YAdQByAG4AaQB0AHUA
        cgBlAAAAAADOm6njPxAXRqgl/Qqnu4hJAAQgAQEIAyAAAQUgAQEREQQgAQEOBCABAQIFIAIBDg4HBwUC
        AgICAgQAAQIOBAABDg4FAAEdBQ4FAAEOHQUFAAESbQ4GAAIBDh0FBQABEnEOBAcBEgwDBwEOBCABHA4F
        IAIBDhwGAAESdRJ1CLd6XFYZNOCJAwYSDAUAAQEdDgQAABIMAyAADgMAAAEECAASDAMoAA4IAQAIAAAA
        AAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEABwEAAAAAEgEADUZyYWRpZU1lcnF1cnkA
        AAUBAAAAACUBACBGcmFkaWVNZXJxdXJ5IENvcHlyaWdodCDCqSAgMjAxOAAADAEABzEuMC4wLjAAAEcB
        ABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBG
        cmFtZXdvcmsgNAQBAAAAWQEAS01pY3Jvc29mdC5WaXN1YWxTdHVkaW8uRWRpdG9ycy5TZXR0aW5nc0Rl
        c2lnbmVyLlNldHRpbmdzU2luZ2xlRmlsZUdlbmVyYXRvcggxNS41LjAuMAAAIwEAHiVURU1QJVxNb25v
        Q2VjaWxcRmF6YXRocm9uLmV4ZQAAFQEAECVURU1QJVxNb25vQ2VjaWwAAAAAAAAAM/K0WgAAAAACAAAA
        HAEAAMAtAADADwAAUlNEU3Ff02nARl9OkhWp6W/cPYkBAAAAQzpcTXlQcm9qZWN0TGlicmFyeVxNb2R1
        bGVNYW5hZ2VyXEhlbHBlclxvYmpcRGVidWdcRnJhZGllTWVycXVyeS5wZGIAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAELwAA
        AAAAAAAAAAAeLwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEC8AAAAAAAAAAAAAAABfQ29yRXhlTWFp
        bgBtc2NvcmVlLmRsbAAAAAAA/yUAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAACABAAAAAgAACAGAAAAFAAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADgAAIAAAAAAAAAAAAAAAAAAAAEA
        AAAAAIAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAGgAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAOgDAACQQAAA
        WAMAAAAAAAAAAAAAWAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
        AAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAEAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkA
        bABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBLgCAAABAFMA
        dAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAJQCAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQABAEMA
        bwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAAAABEAA4A
        AQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAARgByAGEAZABpAGUATQBlAHIAcQB1AHIA
        eQAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAEQAEgABAEkA
        bgB0AGUAcgBuAGEAbABOAGEAbQBlAAAARgByAGEAZABpAGUATQBlAHIAcQB1AHIAeQAuAGUAeABlAAAA
        ZAAgAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAARgByAGEAZABpAGUATQBlAHIAcQB1AHIA
        eQAgAEMAbwBwAHkAcgBpAGcAaAB0ACAAqQAgACAAMgAwADEAOAAAACoAAQABAEwAZQBnAGEAbABUAHIA
        YQBkAGUAbQBhAHIAawBzAAAAAAAAAAAATAASAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
        ZQAAAEYAcgBhAGQAaQBlAE0AZQByAHEAdQByAHkALgBlAHgAZQAAADwADgABAFAAcgBvAGQAdQBjAHQA
        TgBhAG0AZQAAAAAARgByAGEAZABpAGUATQBlAHIAcQB1AHIAeQAAADQACAABAFAAcgBvAGQAdQBjAHQA
        VgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUA
        cgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAAPhDAADqAQAAAAAAAAAAAADvu788P3htbCB2ZXJzaW9u
        PSIxLjAiIGVuY29kaW5nPSJVVEYtOCIgc3RhbmRhbG9uZT0ieWVzIj8+DQoNCjxhc3NlbWJseSB4bWxu
        cz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjEiIG1hbmlmZXN0VmVyc2lvbj0iMS4wIj4N
        CiAgPGFzc2VtYmx5SWRlbnRpdHkgdmVyc2lvbj0iMS4wLjAuMCIgbmFtZT0iTXlBcHBsaWNhdGlvbi5h
        cHAiLz4NCiAgPHRydXN0SW5mbyB4bWxucz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjIi
        Pg0KICAgIDxzZWN1cml0eT4NCiAgICAgIDxyZXF1ZXN0ZWRQcml2aWxlZ2VzIHhtbG5zPSJ1cm46c2No
        ZW1hcy1taWNyb3NvZnQtY29tOmFzbS52MyI+DQogICAgICAgIDxyZXF1ZXN0ZWRFeGVjdXRpb25MZXZl
        bCBsZXZlbD0iYXNJbnZva2VyIiB1aUFjY2Vzcz0iZmFsc2UiLz4NCiAgICAgIDwvcmVxdWVzdGVkUHJp
        dmlsZWdlcz4NCiAgICA8L3NlY3VyaXR5Pg0KICA8L3RydXN0SW5mbz4NCjwvYXNzZW1ibHk+AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAAwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>